import React, { useEffect, useState } from "react";
import Button from "./Button";
import Form from "./Form";
import Loading from "./Loading";
import Modal from "./Modal";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import axios from "axios";
import Select, { SingleValue } from "react-select";
import getYouTubeVideoId from "../utils/getYoutubeVideoId";
import AvailableCaptionsSelect from "./AvailableCaptionsSelect";
import useAddModalShortcuts from "../hooks/useAddModalShortcuts";
import { CaptionType } from "../pages/video/Video";

type playlistType = {
  name: string;
  slug: string;
  _id: string;
};

export type OptionType = {
  value: string;
  label: string;
};

type dataType = {
  id?: string;
  url?: string;
  videoId?: string;
  selectedSubtitle: string;
  videoTitle: string;
  thumbnail: string;
  availableCaptions: availableCaption[];
  playlistId: string;
  defaultCaptionData: {
    name: string;
    transcript?: CaptionType[];
    translatedTranscript?: CaptionType[];
  };
};

type AddVideoModalProps = {
  setIsVideoModalOpen: React.Dispatch<React.SetStateAction<boolean>>;
  defaultValues?: any;
  isVideoModalOpen: boolean;
  className?: string;
  style?: React.CSSProperties;
};

export type availableCaption = {
  id: string;
  isAutoGenerated: boolean;
  language: string;
  name: string;
};

const AddVideoModal = ({
  setIsVideoModalOpen,
  defaultValues,
  className,
  style,
  isVideoModalOpen,
}: AddVideoModalProps) => {
  const [availableCaptions, setAvailavailableCaptions] = useState<
    availableCaption[]
  >([]);
  const [modalLoading, setModalLoading] = useState(false);
  const [thumbnail, setThumbnail] = useState("");
  const [videoTitle, setVideoTitle] = useState("");
  const [videoUrl, setVideoUrl] = useState("");
  const [defaultCaption, setDefaultCaption] = useState("");
  const queryClient = useQueryClient();
  const [options, setOptions] = useState<OptionType[]>([]);
  const [selectedSubtitle, setSelectedSubtitle] = useState("");
  const [selectedPlaylist, setSelectedPlaylist] = useState(
    options?.[0]?.value ?? ""
  );

  const { mutateAsync: addVideoMutation } = useMutation({
    mutationFn: (data: dataType) => {
      return axios.post("video", data);
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["videos"] }),
  });

  const { mutateAsync: updateVideoMutation } = useMutation({
    mutationFn: (data: any) => axios.put(`video/${data.id}`, data),
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["videos"] });
    },
  });

  useAddModalShortcuts(setIsVideoModalOpen);

  const { data: playlists } = useQuery({
    queryKey: ["playlists"],
    queryFn: () =>
      axios.get("playlist").then((res) => res.data as playlistType[]),
  });

  // intialze options
  useEffect(() => {
    if (playlists?.length) {
      const options: OptionType[] = playlists?.map((playlist) => ({
        value: playlist._id,
        label: playlist.name,
      }));

      options?.unshift({ value: "", label: "Select a playlist" });
      setOptions(options);
    }
  }, [playlists]);

  const getVideoData = (url: string) => {
    setModalLoading(true);
    const videoId = getYouTubeVideoId(url);

    axios
      .get("/video/getVideoData/" + videoId)
      .then((res) => {
        const videoData = res.data;

        console.log("videoData", videoData);

        setAvailavailableCaptions(videoData.availableCaptions);
        setVideoTitle(videoData.title);
        setThumbnail(videoData.thumbnail);
      })
      .catch((err) => {
        console.log("err", err);
      })
      .finally(() => {
        setModalLoading(false);
      });
  };

  const addVideo = (url: string) => {
    setModalLoading(true);

    const videoId = getYouTubeVideoId(url);

    const defaultCaptionName =
      availableCaptions.findIndex(
        (caption) => caption.language === defaultCaption
      ) === -1
        ? availableCaptions[0].language
        : availableCaptions[
            availableCaptions.findIndex(
              (caption) => caption.language === defaultCaption
            )
          ].language;

    console.log("axios wworking");
    axios
      .get(`/video/getTranscript?videoId=${videoId}&lang=${defaultCaptionName}`)
      .then(async (res) => {
        const transcript = res.data;

        const translateText = async (text: string) => {
          const { data: translatedText } = await axios.post("/translate", {
            text,
          });

          return translatedText;
        };

        const batchTranslate = async (texts: any, batchSize: number) => {
          const batchedResults = [];
          for (let i = 0; i < texts.length; i += batchSize) {
            const batch = texts.slice(i, i + batchSize);
            const translatedBatch = await Promise.all(
              batch.map((text: any) => translateText(text.text))
            );
            batchedResults.push(...translatedBatch);
          }
          return batchedResults;
        };
        //

        const translatedTranscript = await batchTranslate(transcript, 20);

        console.log("translatedTranscript", translatedTranscript);
        const addVideoData = {
          url,
          selectedSubtitle,
          videoTitle,
          thumbnail,
          availableCaptions,
          playlistId: selectedPlaylist,
          defaultCaptionData: {
            name: defaultCaptionName,
            transcript: transcript,
            translatedTranscript: translatedTranscript,
          },
        };
        try {
          await addVideoMutation(addVideoData);
        } catch (err) {
          console.log(err);
          // throw new Error(err);
        }
      })
      .catch((err) => {
        console.log("err", err);
      })
      .finally(() => {
        setIsVideoModalOpen(false);
        setModalLoading(false);
      });
  };

  const updateVideoHandler = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (defaultValues?.defaultCaption === defaultCaption) {
      console.log("default caption is not changed");

      updateVideoMutation({
        playlistId: selectedPlaylist,
        defaultCaptionData: {
          name: defaultCaption,
        },
        id: defaultValues?.videoId,
      }).then(() => {
        setIsVideoModalOpen(false);
      });
    } else {
      console.log("default caption is changed", defaultCaption);

      const videoId = getYouTubeVideoId(videoUrl);

      axios
        .get(
          "/video/getTranscript?videoId=" + videoId + "&lang=" + defaultCaption
        )

        .then(async (res) => {
          const transcript = res.data;

          const translateText = async (text: string) => {
            const { data: translatedText } = await axios.post("/translate", {
              text,
            });

            return translatedText;
          };

          const batchTranslate = async (texts: any, batchSize: number) => {
            const batchedResults = [];
            for (let i = 0; i < texts.length; i += batchSize) {
              const batch = texts.slice(i, i + batchSize);
              const translatedBatch = await Promise.all(
                batch.map((text: any) => translateText(text.text))
              );
              batchedResults.push(...translatedBatch);
            }
            return batchedResults;
          };

          const translatedTranscript = await batchTranslate(transcript, 20);

          updateVideoMutation({
            url: videoUrl,
            selectedSubtitle,
            videoTitle,
            thumbnail,
            availableCaptions,
            playlistId: selectedPlaylist,
            defaultCaptionData: {
              name: defaultCaption,
              transcript,
              translatedTranscript,
            },
            id: defaultValues?.videoId,
          }).then(() => {
            setIsVideoModalOpen(false);
          });
        });
    }
  };

  const createVideoHandler = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const urlInput = document.querySelector<HTMLInputElement>("#youtubeUrl");
    const errorSpan = document.querySelector<HTMLSpanElement>("#error");

    if (!urlInput || !errorSpan)
      throw new Error("Error: Url input or error span not found");

    const youtubeRegex =
      /^((?:https?:)?\/\/)?((?:www|m)\.)?((?:youtube(-nocookie)?\.com|youtu.be))(\/(?:[\w\-]+\?v=|embed\/|v\/)?)([\w\-]+)(\S+)?$/;

    if (youtubeRegex.test(urlInput.value)) {
      errorSpan.style.display = "none";

      const formData = new FormData(e.target as HTMLFormElement);

      const url = formData.get("video_url") as string;

      const selectedSubtitle = formData.get("video_subtitle");

      if (!availableCaptions?.length) {
        getVideoData(url);
        return;
      }

      addVideo(url);
    } else {
      ("not vaild");
      errorSpan.style.display = "block";
    }
  };

  useEffect(() => {
    // ("defaultValues", defaultValues);
    setVideoUrl(defaultValues?.videoUrl);
    setAvailavailableCaptions(defaultValues?.videoAvailableCaptions || []);
    setDefaultCaption(defaultValues?.defaultCaption);
    setVideoTitle(defaultValues?.videoTitle);
    setThumbnail(defaultValues?.videoThumbnail);

    // (options);

    setSelectedPlaylist(defaultValues?.playlistId);
  }, [defaultValues, options]);

  // useEffect(() => {
  //   (selectedPlaylist);
  // }, [selectedPlaylist]);

  useEffect(() => {
    setModalLoading(false);
  }, [isVideoModalOpen]);

  console.log(defaultValues?.defaultCaption);
  return (
    <Modal
      setIsOpen={setIsVideoModalOpen}
      isOpen={isVideoModalOpen}
      className={className}
      style={style}
    >
      {modalLoading && (
        <>
          <Loading />
          <p className="text-center"> Getting the availableCaptions </p>
        </>
      )}
      <Form
        className="w-[100%] max-w-[unset]"
        onSubmit={(e) => {
          defaultValues?.defaultCaption
            ? updateVideoHandler(e)
            : createVideoHandler(e);
        }}
      >
        <Form.Title>
          {defaultValues?.defaultCaption ? "Save Video" : "Add New Video"}
        </Form.Title>
        <Form.FieldsContainer>
          <Form.Field>
            <Form.Label>Video Url</Form.Label>
            <Form.Input
              className="disabled:bg-gray-200 disabled:opacity-45 disabled:cursor-not-allowed"
              disabled={defaultCaption && defaultValues?.videoUrl}
              value={videoUrl}
              onChange={(e) => {
                setVideoUrl(e.target.value);

                if (availableCaptions?.length) {
                  setAvailavailableCaptions([]);
                  setVideoTitle("");
                  setThumbnail("");
                }
              }}
              id="youtubeUrl"
              type="url"
              name="video_url"
            />
            <span
              id="error"
              style={{ display: "none" }}
              className="mt-3 text-base text-red-500"
            >
              This is not a vaild url
            </span>
          </Form.Field>
          {availableCaptions?.length ? (
            <>
              <Form.Field>
                <Form.Label>Choose your default caption</Form.Label>

                <AvailableCaptionsSelect
                  availableCaptions={availableCaptions}
                  value={defaultCaption}
                  setSelectedCaption={setDefaultCaption}
                />
              </Form.Field>

              <Form.Field>
                <Form.Label>Video Playlist</Form.Label>
                <Select
                  onChange={(e: SingleValue<OptionType>) => {
                    if (e) {
                      setSelectedPlaylist(e.value);
                    }
                  }}
                  options={options}
                  value={
                    options?.find(
                      (option: OptionType) => option.value === selectedPlaylist
                    ) || options?.[0]
                  }
                  placeholder="Select a playlist"
                />
              </Form.Field>

              <img src={thumbnail} />
              <h3>Title : {videoTitle}</h3>
            </>
          ) : null}
        </Form.FieldsContainer>
        <div className="flex gap-2">
          <Button
            size="parent"
            type="button"
            onClick={() => {
              setIsVideoModalOpen(false);
            }}
            variant={"danger"}
            className={"mt-8"}
          >
            Cancel
          </Button>{" "}
          <Button size="parent" className={"mt-8"}>
            {availableCaptions?.length
              ? defaultValues?.defaultCaption
                ? "Edit video"
                : "Add video"
              : "Get video availableCaptions"}
          </Button>
        </div>
      </Form>
    </Modal>
  );
};

export default AddVideoModal;
