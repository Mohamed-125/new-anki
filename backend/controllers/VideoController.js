const { default: axios } = require("axios");
const VideoModel = require("../models/VideoModel");
const { YoutubeTranscript } = require("youtube-transcript");
const cheerio = require("cheerio");
const getSubtitles = require("youtube-captions-scraper").getSubtitles;
const flatted = require("flatted");
// module.exports.getVideoData = async (req, res, next) => {
//   const videoId = req.params.videoId;

//   const url = `https://www.youtube.com/watch?v=${videoId}`;

//   axios
//     .get(url)
//     .then((response) => {
//       const $ = cheerio.load(response.data);
//       let title = $("title").text();
//       let thembnail = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;

//       const regex = /{[^]*}/; // This regex tries to match anything within curly braces

//       let script = $("body div + script").text().slice(29);
//       let stepOneJson = script;
//       let json = stepOneJson.match(/{.*}/)[0];

//       json = json.slice(0, json.indexOf("function") - 2);

//       res.send({
//         response: response.data,
//         url: url,
//         thembnail,
//         json,
//       });
//     })
//     .catch((err) => {
//       return res.status(400).send(err.message);
//     });
// };

module.exports.getVideoData = async (req, res, next) => {
  const videoId = req.params.videoId;
  const apiKey = process.env.YOUTUBE_API_KEY; // Store your API key securely in environment variables

  const videoDetailsUrl = `https://www.googleapis.com/youtube/v3/videos?id=${videoId}&key=${apiKey}&part=snippet,contentDetails`;
  const captionsUrl = `https://www.googleapis.com/youtube/v3/captions?videoId=${videoId}&key=${apiKey}&part=snippet`;

  try {
    // Fetch Video Details
    const videoResponse = await axios.get(videoDetailsUrl);
    const videoData = videoResponse.data.items[0];
    if (!videoData) {
      return res.status(404).send("Video not found");
    }

    // Extract title, thumbnail, and description
    const title = videoData.snippet.title;
    const thumbnail = videoData.snippet.thumbnails.high.url;
    const description = videoData.snippet.description;

    // Fetch Available Captions
    const captionsResponse = await axios.get(captionsUrl);
    const captions = captionsResponse.data.items;

    // Extract details of available captions (language, name)
    const availableCaptions = captions.map((caption) => {
      return {
        id: caption.id,
        language: caption.snippet.language,
        name: caption.snippet.name || caption.snippet.language,
        isAutoGenerated: caption.snippet.trackKind === "asr",
      };
    });

    // Send response
    res.send({
      title,
      thumbnail,
      description,
      availableCaptions,
    });
  } catch (err) {
    console.error("Error fetching video data:", err.message);
    return res.status(400).send(err.message);
  }
};

const getTranscript = async (videoId, lang) => {
  console.log(videoId, lang.slice(0, 2));

  try {
    const subtitle = await getSubtitles({
      videoID: videoId, // youtube video id
      lang: lang.slice(0, 2), // default: `en`
    });
    return subtitle;
  } catch (err) {
    throw new Error(err.message);
  }
};

module.exports.getTranscript = async (req, res) => {
  // res.setHeader("Access-Control-Allow-Origin", "*");
  // res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  // res.setHeader("Access-Control-Allow-Headers", "Content-Type");

  // if (req.method === "OPTIONS") {
  //   return res.status(200).end();
  // }

  const { videoId } = req.query;

  try {
    const transcript = await YoutubeTranscript.fetchTranscript(videoId);
    const newArray = transcript.map((item) => ({
      dur: item.duration.toString(),
      start: item.offset.toString(),
      text: item.text,
    }));

    return res.status(200).json(newArray);
  } catch (err) {
    console.log("err", err);
    return res
      .status(400)
      .json({ msg: "Error getting the subtitle", error: err.message });
  }
};

module.exports.createVideo = async (req, res, next) => {
  const {
    url,
    videoTitle: title,
    thumbnail,
    availableCaptions,
    defaultCaptionData,
    playlistId,
  } = req.body;

  if (!url) return res.status(400).send("you have to enter the video url");
  try {
    const createdVideo = await VideoModel.create({
      url,
      userId: req.user._id,
      title,
      thumbnail,
      availableCaptions,
      defaultCaptionData,
      playlistId,
    });

    res.status(200).send(createdVideo);
  } catch (err) {
    err.message;
    res.status(400).send(err);
  }
};

module.exports.getUserVideos = async (req, res, next) => {
  try {
    const videos = await VideoModel.find(
      { userId: req.user._id },
      {},
      { sort: { createdAt: -1 } }
    );
    res.status(200).send(videos);
  } catch (err) {
    res.status(400).send(err);
  }
};

module.exports.getVideo = async (req, res, next) => {
  try {
    const video = await VideoModel.find({ _id: req.params.id }).populate(
      "videoCards"
    );
    res.status(200).send(video[0]);
  } catch (err) {
    console.log("err", err);
    res.status(400).send(err);
  }
};

module.exports.updateVideo = async (req, res, next) => {
  const { playlistId, defaultCaptionData } = req.body;

  console.log(req.body);
  try {
    const updatedVideo = await VideoModel.findByIdAndUpdate(
      { _id: req.params.id },
      { playlistId, defaultCaptionData },
      {
        new: true,
      }
    );
    res.status(200).send(updatedVideo);
  } catch (err) {
    res.status(400).send(err);
  }
};
module.exports.deleteVideo = async (req, res, next) => {
  try {
    const deletedTodo = await VideoModel.findByIdAndDelete({
      _id: req.params.id,
    });
    res.status(200).send("deleted!!");
  } catch (err) {
    res.status(400).send(err);
  }
};

module.exports.batchDelete = async (req, res) => {
  const { ids } = req.body;
  try {
    await VideoModel.deleteMany({ _id: { $in: ids } });
    res.status(200).send({ message: "videos deleted successfully" });
  } catch (error) {
    res.status(500).send({ error: "Error deleting videos" });
  }
};
module.exports.batchMove = async (req, res) => {
  const { ids, selectedParent } = req.body;

  try {
    await VideoModel.updateMany(
      { _id: { $in: ids } },
      { playlistId: selectedParent }
    );
    res.status(200).send({ message: "videos moved successfully" });
  } catch (error) {
    res.status(500).send({ error: "Error moveing videos" });
  }
};
